//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AP.Data
{
    using System;
    using System.Collections.Generic;
    
    public partial class Suppliers
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Suppliers()
        {
            this.Products = new HashSet<Products>();
        }
    
        public int SupplierID { get; set; }
        public string SupplierName { get; set; }
        public string ContactName { get; set; }
        public string ContactTitle { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public Nullable<System.DateTime> LastModified { get; set; }
        public string ModifiedBy { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Products> Products { get; set; }
    }
    //TODO: Principios utilizados: S - O - I
    // S: (Single Responsibility Principle)
    // Por qué? La clase Suppliers tiene la única responsabilidad de modelar un proveedor,
    // incluyendo su información de contacto y la relación con sus productos.
    // O: (Open/Closed Principle)
    // Por qué? Se puede extender agregando nuevas propiedades o métodos (por ejemplo, cálculos o validaciones)
    // mediante clases parciales o herencia, sin modificar la estructura principal.
    // I: (Interface Segregation Principle)
    // Por qué? La clase podría implementar interfaces específicas como ISupplierEntity o IAuditable,
    // sin necesidad de incluir comportamientos que no correspondan a un proveedor.
}
